name: Python Lambda Container Workflow

on:
    push:
      branches:
        - main
      paths:
        - 'Python_Lambda_Container/**'
        - '.github/workflows/Simple_python_Lambda.yml'
    repository_dispatch:
        types: [create-backstage-component]
    workflow_dispatch:
        inputs:
            function_name:
                description: 'Lambda Function Name'
                required: true
                type: string
            aws_region:
                description: 'AWS Region'
                required: true
                default: 'us-east-1'
                type: string
            memory_size:
                description: 'Lambda Function Memory Size (MB)'
                required: true
                default: '512'
                type: string
            timeout:
                description: 'Lambda Function Timeout (Seconds)'
                required: true
                default: '30'
                type: string

jobs:
    build:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./Python_Lambda_Container/content
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
            AWS_REGION: ${{ secrets.AWS_REGION }}
            FUNCTION_NAME: ${{ inputs.function_name }}
            MEMORY_SIZE: ${{ inputs.memory_size }}
            TIMEOUT: ${{ inputs.timeout }}
            ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            ECR_REPOSITORY: backstage/python-lambda
            IMAGE_NAME: python-hello-world-lambda
            
            
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Set up Python
              run: |
                echo "Setting up Python environment"
                if command -v python3 > /dev/null 2>&1; then
                    echo "Python 3 is already installed: $(python3 --version)"
                    if ! python3 -m pip --version > /dev/null 2>&1; then
                        echo "Installing pip for Python 3..."
                        sudo apt-get update
                        sudo apt-get install -y python3-pip
                    fi
                else
                    echo "Python 3 is not installed. Installing..."
                    sudo apt-get update
                    sudo apt-get install -y python3 python3-pip
                fi
            
            - name: Show Configuration
              run: |
                echo "Function Name: $FUNCTION_NAME"
                echo "AWS Region: $AWS_REGION"
                echo "Memory Size: $MEMORY_SIZE MB"
                echo "Timeout: $TIMEOUT seconds"
                echo "AWS Account ID: $AWS_ACCOUNT_ID"
                echo "ECR Repository: $ECR_REPOSITORY"
                echo "ECR_REGISTRY: $ECR_REGISTRY"
                echo "ECR Image Name: $IMAGE_NAME"
                echo "Full ECR URI would be: $ECR_REGISTRY/$ECR_REPOSITORY:latest"

            - name: Install Dependencies
              run: |
                echo "Installing dependencies"
                python3 -m pip install --upgrade pip --break-system-packages
                python3 -m pip install boto3>=1.34.0 --break-system-packages
                python3 -m pip install -r requirements.txt

            - name: Build Docker Image
              run: |
                echo "Building Docker image"
                docker build -t $IMAGE_NAME .
             
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ secrets.AWS_REGION }}

            - name: Log in to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            - name: Create ECR Repository if it doesn't exist
              run: |
                echo "Creating ECR repository if it doesn't exist"
                aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION || \
                aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION
                echo "ECR repository ready"

            - name: Tag and Push Docker Image to ECR
              env:
                ECR_REPOSITORY: ${{ steps.login-ecr.outputs.registry }}
              run: |
                echo "Tagging and pushing Docker image to ECR"
                docker tag $IMAGE_NAME:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest || {
                    echo "Failed to tag Docker image";
                    exit 1;
                }
                docker tag $IMAGE_NAME:latest $ECR_REGISTRY/$ECR_REPOSITORY:v1.0 || {
                    echo "Failed to tag Docker image with version";
                    exit 1;
                }
                
                echo "Pushing Docker image to ECR"
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest || {
                    echo "Failed to push Docker image to ECR";
                    exit 1;
                }
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:v1.0 || {
                    echo "Failed to push Docker image with version to ECR";
                    exit 1;
                }
                
                echo "Docker image pushed successfully to ECR"

            - name: Deploy or Update Lambda function
              env:
                ECR_REPOSITORY: ${{ steps.login-ecr.outputs.registry }}
              run: |
                echo "Deploying or updating Lambda function"

                echo "Using Function Name: $FUNCTION_NAME"
                echo "Using Memory Size: $MEMORY_SIZE"
                echo "Using Timeout: $TIMEOUT

                # Get AWS Account ID
                AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
                ROLE_NAME="lambda-execution-role"
                ROLE_ARN="arn:aws:iam::${AWS_ACCOUNT_ID}:role/${ROLE_NAME}"

                # Check if role exists, create if not
                if ! aws iam get-role --role-name $ROLE_NAME > /dev/null 2>&1; then
                    echo "Role $ROLE_NAME does not exist. Creating role..."
                
                    # Create trust policy
                    cat > trust-policy.json <<EOF
                    {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Principal": {
                                    "Service": "lambda.amazonaws.com"
                                },
                                "Action": "sts:AssumeRole"
                            }
                        ]
                    }
                    EOF

                      # Create the role
                      aws iam create-role \
                        --role-name $ROLE_NAME \
                        --assume-role-policy-document file://trust-policy.json

                      # Attach basic Lambda execution policy
                      aws iam attach-role-policy \
                        --role-name $ROLE_NAME \
                        --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

                      # Wait for the role to be available
                      sleep 10

                      # Clean up
                      rm trust-policy.json

                      echo " Lambda ececution role created successfully"
                else
                    echo "Role $ROLE_NAME exists. Skipping role creation."
                fi
                
                # Deploy or update the Lambda function
                echo "Checking if Lambda function exists: $FUNCTION_NAME"

                if aws lambda get-function --function-name $FUNCTION_NAME --region $AWS_REGION > /dev/null 2>&1; then
                    echo "Lambda function exists. Updating function..."

                    # Update code first
                    echo "Updating Lambda function code..."
                    aws lambda update-function-code \
                        --function-name $FUNCTION_NAME \
                        --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:latest \
                        --region $AWS_REGION

                    # Wait for code update to complete
                    echo "Waiting for code update to complete..."
                    aws lambda wait function-updated --function-name $FUNCTION_NAME --region $AWS_REGION

                    #Update configuration
                    echo "Updating Lambda function configuration..."
                    aws lambda update-function-configuration \
                        --function-name $FUNCTION_NAME \
                        --memory-size $MEMORY_SIZE \
                        --timeout $TIMEOUT \
                        --region $AWS_REGION
                else
                    echo "Lambda function does not exist. Creating function..."
                    aws lambda create-function \
                        --function-name $FUNCTION_NAME \
                        --package-type Image \
                        --code ImageUri=$ECR_REGISTRY/$ECR_REPOSITORY:latest \
                        --role $ROLE_ARN \
                        --memory-size $MEMORY_SIZE \
                        --timeout $TIMEOUT \
                        --region $AWS_REGION
                fi

                echo "Lambda function deployed or updated successfully"
            
            - name: Clean up
              if: always()
              run: |
                echo " Cleaning up..."
                rm trust-policy.json response.json
                docker image prune -a -f
                echo "Cleanup completed"

            - name: Deployment Summary
              run: |
                echo "Deployment Summary:"
                echo "Function Name: $FUNCTION_NAME"
                echo "AWS Region: $AWS_REGION"
                echo "Memory Size: $MEMORY_SIZE MB"
                echo "Timeout: $TIMEOUT seconds"
                echo "ECR Repository: $ECR_REPOSITORY"
                echo "ECR Image Name: $IMAGE_NAME"
                echo " Lambda Function ARN: $(aws lambda get-function --function-name $FUNCTION_NAME --region $AWS_REGION --query 'Configuration.FunctionArn' --output text)"